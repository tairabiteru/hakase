import hikari
import io
import lightbulb
import pandas
import plotly.express as px
from ...lib.ctx import DelayedResponse
from ...lib.dice import Interpreter, InterpreterException, dynamic_round

dice = lightbulb.Group("dice", "Commands related to dice rolling and probability.")


@dice.register
class Roll(
    lightbulb.SlashCommand,
    name="roll",
    description="Roll dice, just one or multiple. Many types available."
):
    
    expression = lightbulb.string("expression", "The dice expression to use. Ex: \"(3d8 + 2) * 1d4\"")

    @lightbulb.invoke
    async def invoke(self, ctx: lightbulb.Context):
        try:
            await ctx.respond(f"{Interpreter(self.expression).get_output_string()}")
        except InterpreterException as e:
            await ctx.respond(e)


@dice.register
class Distribution(
    lightbulb.SlashCommand,
    name="distribution",
    description="Render a distribution curve of a particular dice roll."
):
    
    expression = lightbulb.string("expression", "The dice expression to use. Ex: \"(3d8 + 2) * 1d4\"")

    @lightbulb.invoke
    async def invoke(self, ctx: lightbulb.Context):
        async with DelayedResponse(ctx, "Computing distribution.", timeout=15) as response:
            interpreter = Interpreter(self.expression)
            dist_map = interpreter.compute_distribution()
            df = pandas.DataFrame(dict(
                Outcomes=list(dist_map.keys()),
                Probability=list(map(lambda x: x * 100, dist_map.values()))
            ))
            figure = px.line(df, x='Outcomes', y='Probability')
            buffer = io.BytesIO()
            figure.write_image(buffer)
            image = hikari.files.Bytes(buffer.getvalue(), "graph.png")
            await response.complete(content=f"Distribution Plot of `{self.expression}`", attachment=image)


@dice.register
class Probability(
    lightbulb.SlashCommand,
    name="probability",
    description="Compute the probability of a dice expression landing on a given number, or numbers."
):
    
    expression = lightbulb.string("expression", "The dice expression to use. Ex: \"(3d8 + 2) * 1d4\"")
    result = lightbulb.string("result", "The result you're computing for. Ex: 10 or >=12")

    @lightbulb.invoke
    async def invoke(self, ctx: lightbulb.Context):
        async with DelayedResponse(ctx, "Computing probabilistic map.", timeout=15) as response:
            interpreter = Interpreter(self.expression)
            dist_map = interpreter.compute_distribution()
            
            if "-" in self.result:
                outcomes = self.result.split("-")
                if outcomes[0] == "":
                    outcomes[0] = min(list(dist_map.keys()))
                if outcomes[1] == "":
                    outcomes[1] = max(list(dist_map.keys()))
                outcomes = list(map(int, outcomes))
            else:
                outcomes = int(self.result)
            
            try:
                if isinstance(outcomes, int):
                    await response.complete(f"The odds of rolling `{outcomes}` on a roll of `{self.expression}` is {dynamic_round(dist_map[outcomes] * 100)}%")
                else:
                    total = 0
                    for i in range(*outcomes):
                        total += dist_map[i]
                    await response.complete(f"The odds of rolling between `{outcomes[0]}` and `{outcomes[1]}` on a roll of `{self.expression}` is {dynamic_round(total * 100)}%.")
            except KeyError:
                if isinstance(outcomes, int):
                    await response.complete(f"The odds of rolling `{outcomes}` on a roll of `{self.expression}` is 0% because `{outcomes}` is outside of the range of the outcomes generated by the dice expression.")
                else:
                    await response.complete(f"Part of the specified range, `{outcomes[0]}-{outcomes[1]}`, lies outside of the range of outcomes generated by the dice expression `{self.expression}`.")
